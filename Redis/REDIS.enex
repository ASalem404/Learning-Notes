<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export4.dtd">
<en-export export-date="20231120T223849Z" application="Evernote" version="10.58.8">
  <note>
    <title>REDIS</title>
    <created>20231010T131451Z</created>
    <updated>20231020T213902Z</updated>
    <note-attributes>
      <author>Ahmed Salem</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><h1><br/></h1><div><b><span style="font-size: 18px;">Note:</span></b></div><div><span style="--en-fontfamily: slab-serif; font-family: &quot;Zilla Slab&quot;,serif,slab-serif"><span style="font-size: 18px;">It still looks like there are a lot of commands to remember, but many of these commands perform similar functions.</span></span></div><hr/><ul><li><h2><b>String</b></h2></li><ul><li><div><span style="font-size: 20px;">Setters</span></div></li><ul><li><div><span style="font-size: 18px;">SET</span></div><div>Used to set a string value to a key</div><div>ex: SET message 'HI'</div><div><br/></div></li><ul><li><div>GET</div><div>GET is an optional to the SET command => Get then update</div><div>ex: SET message 'Hello' GET => returns the value of message then update it to 'Hello'</div><div>if no previous value for the key message then it will return 'nil'</div><div><br/></div></li><li><div>XX</div><div>XX is an optional to the SET command => update if exist</div><div>ex: SET message 'HEY' XX => if message is already exist, then it will update it</div><div>else it will return 'nil'</div><div><br/></div></li><li><div>NX</div><div>NX is an optional to the SET command => set if not exist</div><div>ex: SET message 'HEY' NX => if message is not already exist, then it will set it</div><div>else it will return 'nil'</div><div><br/></div></li><li><div>EX</div><div>EX is an optional to the SET command => set for only a couple of seconds</div><div>ex: SET message 'HEY' EX 5 => after 5 seconds delete this message key</div><div><br/></div></li></ul><li><div><span style="font-size: 18px;">SETRANGE</span></div><div>Used for updating a portion of a string value.</div><div>ex: SETRANGE message 3 'ASA'</div><div>if message value was Hello it will be => 'HeASA'</div><div><br/></div></li><li><div>There are more SET commands but not commonly used.</div><div><br/></div><div><br/></div></li></ul><li><div><span style="font-size: 20px;">Getters</span></div></li><ul style="--en-todo:true;"><ul><li><div><span style="font-size: 16px;">GET</span></div><div><span style="font-size: 16px;">ex: GET name => Ahmed</span></div><div><br/></div></li><li><div>GETRANGE</div><div>Used for getting a portion of a string value.</div><div>ex: GET data 0 2</div><div>if data was 'ASA22' => it will return 'ASA'</div></li></ul></ul></ul></ul><div><br/></div><div><br/></div><hr/><ul><li><div><b><span style="font-size: 24px;">Number</span></b></div></li><ul><li><div><span style="font-size: 16px;">INCR, DECR</span></div><div><span style="font-size: 16px;">Used for incrementing or decrementing a value.</span></div><div><span style="font-size: 16px;">ex: INCR age</span></div><div><span style="font-size: 16px;">if age = 20 it will be 21</span></div><div><br/></div></li><li><div>INCRBY, DECRBY</div><div><span style="font-size: 16px;">Used for incrementing or decrementing a value.</span></div><div><span style="font-size: 16px;">ex: INCRBY age 10</span></div><div><span style="font-size: 16px;">if age = 20 it will be 31</span></div><div><br/></div></li><li><div><span style="font-size: 16px;">INCRBYFLOAT</span></div><div><span style="font-size: 16px;">Used for incrementing and decrementing a value by a float number.</span></div><div><span style="font-size: 16px;">by using minus before the number it means decrease.</span></div><div><span style="font-size: 16px;">ex: INCRBYFLOAT size -10.5</span></div><div><span style="font-size: 16px;">if size = 25 it will be 14.5</span></div><div><br/></div><div><br/></div></li><li><div>So you may ask, 'Why do these number commands exist when I can retrieve and update this value on the server side and then save it back to the database?'</div><div>The answer is, if we were to perform the update process on the server side, we would need to carry out two database operations—one for retrieving the data and another for setting it back.</div><div>This would compromise the efficiency of using an in-memory database, which is all about speed.</div><div>Also, updating values on the server side may lead to dealing with inconsistent values. This can occur when two requests for obtaining the same value happen simultaneously.</div><div>In this case, both requests will read the same value. For instance, if both requests increase it by 1 and write it back, the data will have been increased by one when it should have been increased by two.</div></li></ul></ul><div><b><span style="font-size: 24px;"><span style="--en-markholder:true;"><br/></span></span></b></div><hr/><div><br/></div><ul><li><div><b><span style="font-size: 24px;">HASH</span></b></div></li><ul><li><div><span style="font-size: 16px;">HSET</span></div></li><ul><li><div><span style="font-size: 16px;">Used for adding multiple Key value pairs to a single key or decrementing a value.</span></div><div><span style="font-size: 16px;">ex: HSET person name 'Ahmed' age 22</span></div><div><span style="font-size: 16px;"><span style="--en-markholder:true;"><br/></span></span></div></li></ul><li><div><span style="font-size: 16px;">HGET </span></div></li><ul><li><div><span style="font-size: 16px;">Used for retrieving  a Hash Key value by the field name.</span></div><div><span style="font-size: 16px;">ex: HGET person age  </span></div><div><span style="font-size: 16px;"><span style="--en-markholder:true;"><br/></span></span></div></li></ul><li><div>HGETALL</div></li><ul><li><div><span style="font-size: 16px;">Used for retrieving ALL the Hash Key value pairs.</span></div><div><span style="font-size: 16px;">ex: HGETALL person</span></div><div><span style="font-size: 16px;"><span style="--en-markholder:true;"><br/></span></span></div></li></ul><li><div>HEXISTS</div></li><ul><li><div><span style="font-size: 16px;">Used for checking for the existence of a field in the hash.</span></div><div><span style="font-size: 16px;">ex: HEXISTS person age</span></div><div><span style="font-size: 16px;">return 0 or 1</span></div><div><span style="font-size: 16px;"><span style="--en-markholder:true;"><br/></span></span></div></li></ul><li><div>HDEL</div></li><ul><li><div><span style="font-size: 16px;">Used for deleting fa field from the hash.</span></div><div><span style="font-size: 16px;">ex: HDEL person age</span></div><div><span style="font-size: 16px;"><span style="--en-markholder:true;"><br/></span></span></div></li></ul><li><div>DEL </div></li><ul><li><div>Delete the entire hash.</div><div>ex: DEL person</div><div><br/></div></li></ul><li><div>HINCRBY</div></li><ul><li><div>Adding an integer number value to a hash field.</div><div>ex: HINCRBY person age 10</div><div><br/></div></li></ul><li><div>HINCRBYFLOAT</div></li><ul><li><div>Adding float number value to a hash field.</div><div>ex: HINCRBYFLOAT person age 10.5</div><div><br/></div></li></ul><li><div>HSTRLEN</div></li><ul><li><div>Return the string length of a hash field.</div><div>ex: HSTRLEN person name</div><div><br/></div></li></ul><li><div>HKEYS</div></li><ul><li><div>Return the hash keys.</div><div>ex: HKEYS person</div><div><br/></div></li></ul><li><div>HVALS</div></li><ul><li><div>Return the hash values.</div><div>ex: HVALS person</div></li></ul></ul></ul><div><span style="font-size: 16px;"><span style="--en-markholder:true;"><br/></span></span></div></en-note>      ]]>
    </content>
  </note>
</en-export>
